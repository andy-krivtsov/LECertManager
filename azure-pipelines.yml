trigger:
  branches:
    include:
      - master
      - refs/tags/*
  paths:
    include:
      - LECertManager/*

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'LECertMgr-DevEnv'

  # Function app name
  functionAppName: 'le-cert-mgr'
  
  # App Resource Group name 
  rgName: "LECertManager"

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/LECertManager'

stages:
  - stage: Build
    displayName: Build stage

    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: $(vmImageName)
          

        steps:
          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: 'build'
              projects: $(workingDirectory)/*.csproj
              arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

          - task: ArchiveFiles@2
            displayName: 'Archive files'
            inputs:
              rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
              replaceExistingArchive: true

          - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
            artifact: drop

  - stage: Deploy
    displayName: Deploy stage
    dependsOn: Build
    condition: succeeded()

    jobs:
      - deployment: DevDeploy
        displayName: 'Deploy to Dev slot'
        environment: 'Development'
        condition: eq(variables['build.sourceBranch'], 'refs/heads/master')
        
        pool:
          vmImage: $(vmImageName)

        strategy:
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: 'Azure functions app deploy: development'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    resourceGroupName: '$(rgName)'
                    deployToSlotOrASE: true
                    slotName: 'dev'
                    appType: functionApp
                    appName: '$(functionAppName)'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'auto'
                    
      - deployment: StageDeploy
        displayName: 'Deploy to Stage/Production slot'
        environment: 'Stage'
        condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')

        pool:
          vmImage: $(vmImageName)

        strategy:           
          runOnce:
            deploy:
              steps:
                - task: AzureFunctionApp@1
                  displayName: 'Azure functions app deploy: production'
                  inputs:
                    azureSubscription: '$(azureSubscription)'
                    appType: 'functionApp'
                    appName: '$(functionAppName)'
                    deployToSlotOrASE: true
                    resourceGroupName: '$(rgName)'
                    slotName: 'production'
                    package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                    deploymentMethod: 'auto'
                  